# Template to create a stack to enable port mirroring on a specific port of left vm, and where analyzer is a pProbe static port on the underlay network

# left vn = right vn, left vm and right vm both in left vn, analyzer is a pProbe in the underlay network
#
#            Mirrored to-->pProbe
#            |
#         left_vm(left_vn) ---- right_vm ( left_vn)

heat_template_version: 2015-04-30

parameters:
#==shaker-params
  image:
    type: string
    description: Name of image to use for servers
    description: Name of image to use for servers
  flavor:
    type: string
    description: Flavor to use for servers
  external_net:
    type: string
    description: ID or name of external network
  server_endpoint:
    type: string
    description: Server endpoint address
  dns_nameservers:
    type: comma_delimited_list
    description: DNS nameservers for the subnet
#==shaker-params

  analyzer_name:
    type: string
    description:
  routing_instance:
    type: string
    description: Pass or Deny
  mirror_direction:
    type: string
    description: Protocol
  udp_port:
    type: number
    description: End of the Source Port Range
  nh_mode:
    type: string
    description: VIRTUAL_MACHINE_INTERFACE_PROPERTIES_INTERFACE_MIRROR_MIRROR_TO_NH_MODE.
    constraints:
      - allowed_values:
        - dynamic
        - static
  juniper_header:
    type: string
    description: VIRTUAL_MACHINE_INTERFACE_PROPERTIES_INTERFACE_MIRROR_MIRROR_TO_JUNIPER_HEADER.
    constraints:
      - allowed_values:
        - true
        - false
  static_nh_header_vni:
    type: string
    description: VIRTUAL_MACHINE_INTERFACE_PROPERTIES_INTERFACE_MIRROR_MIRROR_TO_NH_HEADER_VNI
  static_nh_header_vtep_dst_ip_address:
    type: string
    description: VIRTUAL_MACHINE_INTERFACE_PROPERTIES_INTERFACE_MIRROR_MIRROR_TO_NH_HEADER_VTEP_DST_IP_ADDRESS
  static_nh_header_vtep_dst_mac_address:
    type: string
    description: VIRTUAL_MACHINE_INTERFACE_PROPERTIES_INTERFACE_MIRROR_MIRROR_TO_NH_HEADER_VTEP_DST_MAC_ADDRESS

 # VN Parameters
  left_vn:
    type: string
    description: Name of left network to be created
  left_vn_fqdn:
    type: string
    description: FQ Name of the left network
  network_ipam_refs_data_ipam_subnets_subnet_ip_prefix_1:
    type: string
    description: subnet prefix for mgmt network
  network_ipam_refs_data_ipam_subnets_subnet_ip_prefix_len_1:
    type: string
    description: subnet prefix len for mgmt network

  analyzer_vn:
    type: string
    description: Name of left network to be created
  analyzer_vn_fqdn:
    type: string
    description: FQ Name of the left network
  network_ipam_refs_data_ipam_subnets_subnet_ip_prefix_2:
    type: string
    description: subnet prefix for mgmt network
  network_ipam_refs_data_ipam_subnets_subnet_ip_prefix_len_2:
    type: string
    description: subnet prefix len for mgmt network

  network_ipam_refs_data_ipam_subnets_addr_from_start_true:
    type: boolean
    description: Address allocation from start of the pool

  # Nova image parameters
  left_vm_name:
    type: string
    description: Name of the left VM
  right_vm_name:
    type: string
    description: Name of the right VM
  image:
    type: string
    description: Name of the image
  flavor:
    type: string
    description: Flavor
  az:
    type: string
    description: Availability Zone for agents

  # Verification Message String
  verification_message_string:
    type: string
    description: Message string which shall be searched in port-mirrored data for verification

resources:
#==shaker resources
  shaker_private_net:
    type: OS::Neutron::Net
    properties:
      name: {{ unique }}_net

  shaker_private_subnet:
    type: OS::Neutron::Subnet
    properties:
      network_id: { get_resource: shaker_private_net }
      cidr: 10.0.0.0/16
      enable_dhcp: true
      gateway_ip: 10.0.0.1

  shaker_router:
    type: OS::Neutron::Router
    properties:
      external_gateway_info:
        network: { get_param: external_net }

  shaker_router_interface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: shaker_router }
      subnet_id: { get_resource: shaker_private_subnet }

  shaker_security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      rules: [
        {remote_ip_prefix: 0.0.0.0/0,
        protocol: tcp,
        port_range_min: 1,
        port_range_max: 65535},
        {remote_ip_prefix: 0.0.0.0/0,
        protocol: udp,
        port_range_min: 1,
        port_range_max: 65535},
        {remote_ip_prefix: 0.0.0.0/0,
        protocol: icmp},
        {remote_ip_prefix: 0.0.0.0/0,
        protocol: 132,
        port_range_min: 1,
        port_range_max: 65535},
        {remote_ip_prefix: 0.0.0.0/0,
        protocol: tcp,
        port_range_min: 22,
        port_range_max: 22}]
#==shaker resources

  template_NetworkIpam_1:
    type: OS::ContrailV2::NetworkIpam
    properties:
      name: { get_param: left_vn }

  template_NetworkIpam_2:
    type: OS::ContrailV2::NetworkIpam
    properties:
      name: { get_param: analyzer_vn }

  template_VirtualNetwork_1:
    type: OS::ContrailV2::VirtualNetwork
    depends_on: [ template_NetworkIpam_1 ]
    properties:
      name: { get_param: left_vn }
      network_ipam_refs: [{ get_resource: template_NetworkIpam_1 }]
      network_ipam_refs_data:
        [{
          network_ipam_refs_data_ipam_subnets:
            [{
              network_ipam_refs_data_ipam_subnets_subnet:
                {
                  network_ipam_refs_data_ipam_subnets_subnet_ip_prefix: { get_param: network_ipam_refs_data_ipam_subnets_subnet_ip_prefix_1 },
                  network_ipam_refs_data_ipam_subnets_subnet_ip_prefix_len: { get_param: network_ipam_refs_data_ipam_subnets_subnet_ip_prefix_len_1 },
                },
            }]
         }]

  template_VirtualNetwork_2:
    type: OS::ContrailV2::VirtualNetwork
    depends_on: [ template_NetworkIpam_1 ]
    properties:
      name: { get_param: analyzer_vn }
      network_ipam_refs: [{ get_resource: template_NetworkIpam_2 }]
      network_ipam_refs_data:
        [{
          network_ipam_refs_data_ipam_subnets:
            [{
              network_ipam_refs_data_ipam_subnets_subnet:
                {
                  network_ipam_refs_data_ipam_subnets_subnet_ip_prefix: { get_param: network_ipam_refs_data_ipam_subnets_subnet_ip_prefix_2 },
                  network_ipam_refs_data_ipam_subnets_subnet_ip_prefix_len: { get_param: network_ipam_refs_data_ipam_subnets_subnet_ip_prefix_len_2 },
                },
            }]
         }]

  template_VirtualMachineInterface_1:
    type: OS::ContrailV2::VirtualMachineInterface
    depends_on: [ ]
    properties:
      name: { get_param: left_vm_name}
      virtual_network_refs: [{ list_join: [':', { get_attr: [ template_VirtualNetwork_1, fq_name ] } ] }]
      virtual_machine_interface_properties:
        {
          virtual_machine_interface_properties_interface_mirror:
            {
              virtual_machine_interface_properties_interface_mirror_traffic_direction: {get_param: mirror_direction},
              virtual_machine_interface_properties_interface_mirror_mirror_to:
                {
                  virtual_machine_interface_properties_interface_mirror_mirror_to_analyzer_name: {get_param: analyzer_name},
                  virtual_machine_interface_properties_interface_mirror_mirror_to_analyzer_ip_address: { get_param: static_nh_header_vtep_dst_ip_address },
                  virtual_machine_interface_properties_interface_mirror_mirror_to_routing_instance: {get_param : routing_instance},
                  virtual_machine_interface_properties_interface_mirror_mirror_to_udp_port: { get_param: udp_port},
                  virtual_machine_interface_properties_interface_mirror_mirror_to_juniper_header: { get_param: juniper_header },
                  virtual_machine_interface_properties_interface_mirror_mirror_to_nh_mode: { get_param: nh_mode },
                  virtual_machine_interface_properties_interface_mirror_mirror_to_static_nh_header:
                    {
                      virtual_machine_interface_properties_interface_mirror_mirror_to_static_nh_header_vni: { get_param: static_nh_header_vni },
                      virtual_machine_interface_properties_interface_mirror_mirror_to_static_nh_header_vtep_dst_ip_address: { get_param: static_nh_header_vtep_dst_ip_address },
                      virtual_machine_interface_properties_interface_mirror_mirror_to_static_nh_header_vtep_dst_mac_address: { get_param: static_nh_header_vtep_dst_mac_address },
                    }
                }
            }
        }

  # Analyzer VMI
  template_VirtualMachineInterface_2:
    type: OS::ContrailV2::VirtualMachineInterface
    depends_on: [  ]
    properties:
      name: { get_attr: [ random_key_2, value ] }
      virtual_network_refs: [{ list_join: [':', { get_attr: [ template_VirtualNetwork_2, fq_name ] } ] }]

  template_VirtualMachineInterface_3:
    type: OS::ContrailV2::VirtualMachineInterface
    depends_on: [  ]
    properties:
      name: { get_param: right_vm_name}
      virtual_network_refs: [{ list_join: [':', { get_attr: [ template_VirtualNetwork_1, fq_name ] } ] }]

  template_InstanceIp_1:
    type: OS::ContrailV2::InstanceIp
    depends_on: [ template_VirtualMachineInterface_1, template_VirtualNetwork_1 ]
    properties:
      name: { get_attr: [ random_key_1, value ] }
      virtual_machine_interface_refs: [{ get_resource: template_VirtualMachineInterface_1 }]
      virtual_network_refs: [{ list_join: [':', { get_attr: [ template_VirtualNetwork_1, fq_name ] } ] }]

  template_InstanceIp_3:
    type: OS::ContrailV2::InstanceIp
    depends_on: [ template_VirtualMachineInterface_3, template_VirtualNetwork_1 ]
    properties:
      name: { get_attr: [ random_key_3, value ] }
      virtual_machine_interface_refs: [{ get_resource: template_VirtualMachineInterface_3 }]
      virtual_network_refs: [{ list_join: [':', { get_attr: [ template_VirtualNetwork_1, fq_name ] } ] }]


{% for agent in agents.values() %}
  {% set agent_index = agent.id.split('_')[3] %}
  {% if 'master' in agent.id %}

  #{{ agent.id }}:
  master_vm_{{ agent_index }}:
    type: OS::Nova::Server
    depends_on: [ template_InstanceIp_1, slave_vm_{{ agent_index }} ]
    properties:
      name: {{ agent.id }}
      image: { get_param: image }
      flavor: { get_param: flavor }
      availability_zone: { get_param: az }
      networks:
        #==shaker port
        - port: { get_resource: {{ agent.id }}_shaker_port }
        #==shaker port
        - port: { get_resource: template_VirtualMachineInterface_1 }
        #==external port
        #- network: { get_param: external_net }
        #==external port
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #!/bin/bash

            echo `date` > ~/start-up-ts.txt

            dhclient ens4
            sudo ip r add $ANALYZER_VN/$VN_LEN dev ens4

            #==external port
            #dhclient ens5
            #==external port

            echo $left_vm_ip >> ~/left_vm_ip.txt
            echo $right_vm_ip >> ~/right_vm_ip.txt
            echo $verification_msg >> ~/verification_msg.txt

            #==shaker cmd
            screen -dmS shaker-agent-screen shaker-agent --server-endpoint=$SERVER_ENDPOINT --agent-id=$AGENT_ID --debug --log-file /var/log/shaker-agent.log
            #==shaker cmd

            ###########################################################
            # Create a small tcp_client.py file and run it
            ###########################################################
            cat << EOF | tee -a ~/tcp_client.py
            import socket
            import sys

            # Create a TCP/IP socket
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

            # Connect the socket to the port where the server is listening
            server_address = ('$right_vm_ip', 10000)
            print >>sys.stdout, 'connecting to %s port %s' % server_address
            sock.connect(server_address)

            try:
                message = '$verification_msg'

                print >>sys.stdout, 'sending data to the client'
                sock.sendall(message)

            finally:
                print >>sys.stdout, 'closing socket'
                sock.close()
            EOF
            ###########################################################
            python ~/tcp_client.py > ~/client_output

          params:
            #==shaker params
            "$SERVER_ENDPOINT": { get_param: server_endpoint }
            "$AGENT_ID": {{ agent.id }}
            #==shaker params
            "$ANALYZER_VN": { get_param: network_ipam_refs_data_ipam_subnets_subnet_ip_prefix_2 }
            "$VN_LEN": { get_param: network_ipam_refs_data_ipam_subnets_subnet_ip_prefix_len_2 }
            "$left_vm_ip": { get_attr: [template_InstanceIp_1, instance_ip_address] }
            "$right_vm_ip": { get_attr: [template_InstanceIp_3, instance_ip_address] }
            "$verification_msg": { get_param: verification_message_string }

  #==shaker port
  {{ agent.id }}_shaker_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: shaker_private_net }
      fixed_ips:
        - subnet_id: { get_resource: shaker_private_subnet }
      security_groups:
        - { get_resource: shaker_security_group }
        - default
  #==shaker port

  {% else %}

  #{{ agent.id }}:
  slave_vm_{{ agent_index }}:
    type: OS::Nova::Server
    depends_on: [ template_InstanceIp_3  ]
    properties:
      name: {{ agent.id }}
      image: { get_param: image }
      flavor: { get_param: flavor }
      availability_zone: { get_param: az }
      networks:
        #==shaker port
        - port: { get_resource: {{ agent.id }}_shaker_port }
        #==shaker port
        - port: { get_resource: template_VirtualMachineInterface_3 }
        #==external port
        #- network: { get_param: external_net }
        #==external port
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #!/bin/bash

            echo `date` > ~/start-up-ts.txt

            dhclient ens4
            sudo ip r add $LEFT_VN/$VN_LEN dev ens4

            #==external port
            #dhclient ens5
            #==external port

            #==shaker cmd
            screen -dmS shaker-agent-screen shaker-agent --server-endpoint=$SERVER_ENDPOINT --agent-id=$AGENT_ID --debug --log-file /var/log/shaker-agent.log
            #==shaker cmd

            #####################################################
            # Create a small tcp_server.py file and run it
            #####################################################
            cat << EOF | tee -a ~/tcp_server.py
            import socket
            import sys

            # Create a TCP/IP socket
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

            # Bind the socket to the port
            server_address = ('$right_vm_ip', 10000)
            print >>sys.stdout, 'starting up on %s port %s' % server_address
            sock.bind(server_address)

            # Listen for incoming connections
            sock.listen(1)

            while True:
                # Wait for a connection
                print >>sys.stdout, 'waiting for a connection'
                connection, client_address = sock.accept()

                # Send data
                message = '$verification_msg'

                try:
                    print >>sys.stdout, 'connection from', client_address

                    # Look for the response
                    amount_received = 0
                    amount_expected = len(message)

                    while amount_received < amount_expected:
                        data = connection.recv(amount_expected)
                        amount_received += len(data)
                        print >>sys.stdout, 'received "%s"' % data

                finally:
                    # Clean up the connection
                    connection.close()
            EOF
            #####################################################
            python ~/tcp_server.py > ~/server_output &

          params:
            #==shaker params
            "$SERVER_ENDPOINT": { get_param: server_endpoint }
            "$AGENT_ID": {{ agent.id }}
            #==shaker params
            "$LEFT_VN": { get_param: network_ipam_refs_data_ipam_subnets_subnet_ip_prefix_1 }
            "$VN_LEN": { get_param: network_ipam_refs_data_ipam_subnets_subnet_ip_prefix_len_1 }
            "$left_vm_ip": { get_attr: [template_InstanceIp_1, instance_ip_address] }
            "$right_vm_ip": { get_attr: [template_InstanceIp_3, instance_ip_address] }
            "$verification_msg": { get_param: verification_message_string }

  #==shaker port
  {{ agent.id }}_shaker_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: shaker_private_net }
      fixed_ips:
        - subnet_id: { get_resource: shaker_private_subnet }
      security_groups:
        - { get_resource: shaker_security_group }
        - default
  #==shaker port

  {% endif %}
{% endfor %}

  # Network policy for enabling mirroring

  random_key_1:
     type: OS::Heat::RandomString
     properties:
       length: 16

  random_key_2:
     type: OS::Heat::RandomString
     properties:
       length: 16

  random_key_3:
     type: OS::Heat::RandomString
     properties:
       length: 16


outputs:
#==shaker output
{% for agent in agents.values() %}
  {% set agent_index = agent.id.split('_')[3] %}
  {% if 'master' in agent.id %}

  {{ agent.id }}_instance_name:
    value: { get_attr: [ master_vm_{{ agent_index }}, instance_name ] }
  {{ agent.id }}_ip:
    value: { get_attr: [ master_vm_{{ agent_index }}, networks, { get_attr: [shaker_private_net, name] }, 0 ] }

  {% else %}

  {{ agent.id }}_instance_name:
    value: { get_attr: [ slave_vm_{{ agent_index }}, instance_name ] }
  {{ agent.id }}_ip:
    value: { get_attr: [ slave_vm_{{ agent_index }}, networks, { get_attr: [shaker_private_net, name] }, 0 ] }
  {% endif %}
{% endfor %}
#==shaker output
