heat_template_version: 2015-04-30

description: |
  HOT to create VLAN tagged interface on instances with the slave
  subinterface mirrored to the master on port ens5.
         <-------------------------------------------------^
         |                                                 |
         |                                                 |
     ens5|                                                 |
         v                                                 |
  +------+------+                     +-------------+     port
  |             |                     |             |    mirror
  |    master   |                     |    slave    |      |
  |             |                     |             |      |
  +-----+-+-----+                     +-----+-+-----+      |
    ens4| |ens4.201                     ens4| |ens4.201 --->
        | |                                 | |
        | |                                 | |
  +-----+-|--------192.168.2.0/24-----------+-|----+
          |                                   |
     +----+-----------192.168.3.0/24----------+-------+

parameters:
#==shaker-params
  image:
    type: string
    description: Name of image to use for servers
  flavor:
    type: string
    description: Flavor to use for servers
  external_net:
    type: string
    description: ID or name of external network
  server_endpoint:
    type: string
    description: Server endpoint address
  dns_nameservers:
    type: comma_delimited_list
    description: DNS nameservers for the subnet
#==shaker-params

  private_net_name_0:
    type: string
    default: {{ unique }}_trunk-parent-network
  private_net_cidr_0:
    type: string
  private_net_gateway_0:
    type: string
  private_net_name_1:
    type: string
    default: {{ unique }}_trunk-child-network
  private_net_cidr_1:
    type: string
  private_net_gateway_1:
    type: string
  private_net_name_2:
    type: string
    default: {{ unique }}_mirror-network
  private_net_cidr_2:
    type: string
  private_net_gateway_2:
    type: string
  primary_interface_1:
    type: string
  sub_interface_1:
    type: string
  vlan_tag_1:
    type: number
  image:
    type: string
  flavor:
    type: string

  # mirror properties
  mirror_interface:
    type: string
    description: Interface to use as mirror destination
  mirror_udp_port:
    type: string
    description: UDP port for mirror service
  mirror_direction:
    type: string
  mirror_nh_mode:
    type: string

  # network policy to allow traffic to mirror net
  policy_name:
    type: string
    description: Name of the Policy
    default: {{ unique }}_mirror_policy
  simple_action:
    type: string
    description: Pass or Deny
  protocol:
    type: string
    description: Protocol
  src_port_end:
    type: number
    description: End of the Source Port Range
  src_port_start:
    type: number
    description: Start of the Source Port Range
  direction:
    type: string
    description: Direction of the Policy
  dst_port_end:
    type: number
    description: End of the Destination Port Range
  dst_port_start:
    type: number
    description: Start of the Destination Port Range

# Project and Domain
  domain:
    type: string
  project:
    type: string

resources:
#==shaker resources
  shaker_private_net:
    type: OS::Neutron::Net
    properties:
      name: {{ unique }}_net

  shaker_private_subnet:
    type: OS::Neutron::Subnet
    properties:
      network_id: { get_resource: shaker_private_net }
      cidr: 10.0.0.0/16
      enable_dhcp: true
      gateway_ip: 10.0.0.1

  shaker_router:
    type: OS::Neutron::Router
    properties:
      external_gateway_info:
        network: { get_param: external_net }

  shaker_router_interface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: shaker_router }
      subnet_id: { get_resource: shaker_private_subnet }

  shaker_security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      rules: [
        {remote_ip_prefix: 0.0.0.0/0,
        protocol: tcp,
        port_range_min: 1,
        port_range_max: 65535},
        {remote_ip_prefix: 0.0.0.0/0,
        protocol: udp,
        port_range_min: 1,
        port_range_max: 65535},
        {remote_ip_prefix: 0.0.0.0/0,
        protocol: icmp},
        {remote_ip_prefix: 0.0.0.0/0,
        protocol: 132,
        port_range_min: 1,
        port_range_max: 65535},
        {remote_ip_prefix: 0.0.0.0/0,
        protocol: tcp,
        port_range_min: 22,
        port_range_max: 22}]
#==shaker resources

  private_net_0:
    type: OS::Neutron::Net
    properties:
      name: { get_param: private_net_name_0 }

  private_subnet_0:
    type: OS::Neutron::Subnet
    properties:
      network_id: { get_resource: private_net_0 }
      cidr: { get_param: private_net_cidr_0 }
      gateway_ip: { get_param: private_net_gateway_0 }

  private_net_1:
    type: OS::ContrailV2::VirtualNetwork
    depends_on: [ mirror_policy ]
    properties:
      name: { get_param: private_net_name_1 }
      network_policy_refs: [{ list_join: [':', [ {get_param: domain}, {get_param: project}, {get_param: policy_name} ]]}]
      network_policy_refs_data:
        [{
          network_policy_refs_data_sequence:
            {
              network_policy_refs_data_sequence_major: 0,
              network_policy_refs_data_sequence_minor: 0,
            },
        }]

  private_subnet_1:
    type: OS::Neutron::Subnet
    properties:
      network_id: { get_resource: private_net_1 }
      cidr: { get_param: private_net_cidr_1 }
      gateway_ip: { get_param: private_net_gateway_1 }

  private_net_2:
    type: OS::ContrailV2::VirtualNetwork
    depends_on: [ mirror_policy ]
    properties:
      name: { get_param: private_net_name_2 }
      network_policy_refs: [{ list_join: [':', [ {get_param: domain}, {get_param: project}, {get_param: policy_name} ]]}]
      network_policy_refs_data:
        [{
          network_policy_refs_data_sequence:
            {
              network_policy_refs_data_sequence_major: 0,
              network_policy_refs_data_sequence_minor: 0,
            },
        }]

  private_subnet_2:
    type: OS::Neutron::Subnet
    properties:
      network_id: { get_resource: private_net_2 }
      cidr: { get_param: private_net_cidr_2 }
      gateway_ip: { get_param: private_net_gateway_2 }

{% for agent in agents.values() %}
  {% if 'master' in agent.id %}

  {{ agent.id }}:
    type: OS::Nova::Server
    depends_on: [ {{ agent.slave_id }}_instanceIP_1_2 ]
    properties:
      name: {{ agent.id }}
      image: { get_param: image }
      flavor: { get_param: flavor }
      availability_zone: "{{ agent.availability_zone }}"
      networks:
        #==shaker port
        - port: { get_resource: {{ agent.id }}_shaker_port }
        #==shaker port
        - network: { get_resource: private_net_0 }
        #==monitor port
        - port: { get_resource: {{ agent.id }}_mirror_port }
        #==monitor port
      user_data:
        str_replace:
          template: |
            #!/bin/bash
            apt-get install vlan
            modprobe 8021q
            echo "8021q" >> /etc/modules
            vconfig add $primary_interface $vlan_tag_1
            ip link set $primary_interface.$vlan_tag_1 up
            dhclient $primary_interface
            dhclient $primary_interface.$vlan_tag_1

            echo $peer_node_sub_iface1_ip >> /tmp/srvr_slave_sub_iface1_ip.txt

            # run tcpdump on the mirror interface (ens5)
            dhclient $mirror_interface
            sysctl -w net.ipv4.icmp_msgs_per_sec=0
            tcpdump -l -U -i $mirror_interface -s 65535 -w /tmp/capture_packets.pcap udp port $mirror_udp_port &

            #==shaker cmd
            screen -dmS shaker-agent-screen shaker-agent --server-endpoint=$SERVER_ENDPOINT --agent-id=$AGENT_ID --debug --log-file /var/log/shaker-agent.log
            #==shaker cmd
          params:
            #==shaker params
            "$SERVER_ENDPOINT": { get_param: server_endpoint }
            "$AGENT_ID": {{ agent.id }}
            #==shaker params
            $primary_interface: { get_param: primary_interface_1 }
            $vlan_tag_1: { get_param: vlan_tag_1 }
            $sub_interface_1: { get_param: sub_interface_1 }
            $peer_node_sub_iface1_ip: { get_attr: [ {{ agent.slave_id}}_instanceIP_1_2, instance_ip_address] }
            $mirror_interface: { get_param: mirror_interface }
            $mirror_udp_port: { get_param: mirror_udp_port }

  #==shaker port
  {{ agent.id }}_shaker_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: shaker_private_net }
      fixed_ips:
        - subnet_id: { get_resource: shaker_private_subnet }
      security_groups:
        - { get_resource: shaker_security_group }
        - default
  #==shaker port

  #==mirror port
  {{ agent.id }}_mirror_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: private_net_2 }
      fixed_ips:
        - subnet_id: { get_resource: private_subnet_2 }
#==mirror port

  {{ agent.id }}_template_VirtualMachineInterface_1:
    type: OS::ContrailV2::VirtualMachineInterface
    properties:
      name: {{ agent.id }}_leftSUB_201
      virtual_network_refs: [{ get_resource: private_net_1 }]
      virtual_machine_interface_properties:
        {
          virtual_machine_interface_properties_sub_interface_vlan_tag: { get_param: vlan_tag_1 },
        }
      virtual_machine_interface_mac_addresses:
        {
          virtual_machine_interface_mac_addresses_mac_address: [{ get_attr: [{{ agent.id }}, addresses, get_param: private_net_name_0, 0, "OS-EXT-IPS-MAC:mac_addr"] }],
        }
      virtual_machine_interface_refs: [{ get_attr: [{{ agent.id }}, addresses, get_param: private_net_name_0, 0, "port"] }]
      security_group_refs: [ list_join: [':', [ {get_param: domain}, {get_param: project}, 'default' ]] ]

  {{ agent.id }}_instanceIP_1_1:
    type: OS::ContrailV2::InstanceIp
    depends_on: [ {{ agent.id }}_template_VirtualMachineInterface_1, private_subnet_1 ]
    properties:
      virtual_network_refs: [{ get_resource: private_net_1 }]
      virtual_machine_interface_refs: [{ get_resource: {{ agent.id }}_template_VirtualMachineInterface_1 }]

  {% else %}

  {{ agent.id }}:
    type: OS::Nova::Server
    properties:
      name: {{ agent.id }}
      image: { get_param: image }
      flavor: { get_param: flavor }
      availability_zone: "{{ agent.availability_zone }}"
      networks:
        #==shaker port
        - port: { get_resource: {{ agent.id }}_shaker_port }
        #==shaker port
        - network: { get_resource: private_net_0 }
        #==external port
        #- network: { get_param: external_net }
        #==external port
      user_data:
        str_replace:
          template: |
            #!/bin/bash
            apt-get install vlan
            modprobe 8021q
            echo "8021q" >> /etc/modules
            vconfig add $primary_interface $vlan_tag_1
            ip link set $primary_interface.$vlan_tag_1 up
            dhclient $primary_interface
            dhclient $primary_interface.$vlan_tag_1

            HOST_IFACE=$primary_interface.$vlan_tag
            node_sub_iface_ip=$(ip addr | awk "/inet/ && /${HOST_IFACE}/{sub(/\/.*$/,\"\",\$2); print \$2}")

            echo $node_sub_iface_ip >> /tmp/srvr_slave_sub_iface_ip.txt

            # run a listening process that we can send some TCP traffic to (and see it mirrored)
            nc -l $node_sub_iface_ip 10000 &

            #==shaker cmd
            screen -dmS shaker-agent-screen shaker-agent --server-endpoint=$SERVER_ENDPOINT --agent-id=$AGENT_ID --debug --log-file /var/log/shaker-agent.log
            #==shaker cmd
          params:
            #==shaker params
            "$SERVER_ENDPOINT": { get_param: server_endpoint }
            "$AGENT_ID": {{ agent.id }}
            #==shaker params
            $primary_interface: { get_param: primary_interface_1 }
            $vlan_tag_1: { get_param: vlan_tag_1 }
            $sub_interface_1: { get_param: sub_interface_1 }

  #==shaker port
  {{ agent.id }}_shaker_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: shaker_private_net }
      fixed_ips:
        - subnet_id: { get_resource: shaker_private_subnet }
      security_groups:
        - { get_resource: shaker_security_group }
        - default
  #==shaker port

  {{ agent.id }}_template_VirtualMachineInterface_2:
    type: OS::ContrailV2::VirtualMachineInterface
    properties:
      name: {{ agent.id }}_rightSUB_201
      virtual_network_refs: [{ get_resource: private_net_1 }]
      virtual_machine_interface_properties:
        {
          virtual_machine_interface_properties_sub_interface_vlan_tag: { get_param: vlan_tag_1 },
          virtual_machine_interface_properties_interface_mirror:
            {
              virtual_machine_interface_properties_interface_mirror_traffic_direction: {get_param: mirror_direction},
              virtual_machine_interface_properties_interface_mirror_mirror_to:
                {
                  virtual_machine_interface_properties_interface_mirror_mirror_to_analyzer_name: {{ agent.master_id }},
                  virtual_machine_interface_properties_interface_mirror_mirror_to_analyzer_ip_address:
                    { get_attr: [ {{ agent.master_id }}_mirror_port, fixed_ips, 0, ip_address ]},
                  virtual_machine_interface_properties_interface_mirror_mirror_to_udp_port: { get_param: mirror_udp_port },
                  virtual_machine_interface_properties_interface_mirror_mirror_to_nh_mode: { get_param: mirror_nh_mode },
                }
            }
        }
      virtual_machine_interface_mac_addresses:
        {
        virtual_machine_interface_mac_addresses_mac_address: [{ get_attr: [{{ agent.id }}, addresses, get_param: private_net_name_0, 0, "OS-EXT-IPS-MAC:mac_addr"] }]
        }
      virtual_machine_interface_refs: [{ get_attr: [{{ agent.id }}, addresses, get_param: private_net_name_0, 0, "port"] }]
      security_group_refs: [ list_join: [':', [ {get_param: domain}, {get_param: project}, 'default' ]] ]

  {{ agent.id }}_instanceIP_1_2:
    type: OS::ContrailV2::InstanceIp
    depends_on: [ {{ agent.id }}_template_VirtualMachineInterface_2, private_subnet_1 ]
    properties:
      virtual_network_refs: [{ get_resource: private_net_1 }]
      virtual_machine_interface_refs: [{ get_resource: {{ agent.id }}_template_VirtualMachineInterface_2 }]

  {% endif %}
{% endfor %}

  mirror_policy:
    type: OS::ContrailV2::NetworkPolicy
    properties:
      name: { get_param: policy_name }
      network_policy_entries:  {
        network_policy_entries_policy_rule: [{
          network_policy_entries_policy_rule_direction: { get_param: direction },
          network_policy_entries_policy_rule_protocol: { get_param: protocol },
          network_policy_entries_policy_rule_src_ports: [{
            network_policy_entries_policy_rule_src_ports_start_port: { get_param: src_port_start },
            network_policy_entries_policy_rule_src_ports_end_port: { get_param: src_port_end }
          }],
          network_policy_entries_policy_rule_dst_ports: [{
            network_policy_entries_policy_rule_dst_ports_start_port: { get_param: dst_port_start },
            network_policy_entries_policy_rule_dst_ports_end_port: { get_param: dst_port_end }
          }],
          network_policy_entries_policy_rule_dst_addresses: [{
            network_policy_entries_policy_rule_dst_addresses_virtual_network: {
              list_join: [':', [ {get_param: domain}, {get_param: project}, {get_param: private_net_name_2} ]]
            }
          }],
          network_policy_entries_policy_rule_src_addresses: [{
            network_policy_entries_policy_rule_src_addresses_virtual_network: {
              list_join: [':', [ {get_param: domain}, {get_param: project}, {get_param: private_net_name_1} ]]
            }
          }],
          network_policy_entries_policy_rule_action_list: {
            network_policy_entries_policy_rule_action_list_simple_action: { get_param: simple_action },
          }
        }]
      }

outputs:
#==shaker output
{% for agent in agents.values() %}
  {{ agent.id }}_instance_name:
    value: { get_attr: [ {{ agent.id }}, instance_name ] }
  {{ agent.id }}_ip:
    value: { get_attr: [ {{ agent.id }}, networks, { get_attr: [shaker_private_net, name] }, 0 ] }
  {{ agent.id }}_mac:
    value: { get_attr: [{{ agent.id }}, addresses, get_param: private_net_name_0, 0, "OS-EXT-IPS-MAC:mac_addr"] }
  {{ agent.id }}_port_uuid:
    value: { get_attr: [{{ agent.id }}, addresses, get_param: private_net_name_0, 0, "port"] }
{% endfor %}
#==shaker output
